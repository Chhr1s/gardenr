)
cv$splits[[1]]
analysis(cv$splits)
rsample::analysis(cv$splits)
rsample::analysis(cv$splits[[1]])
fitted_result <-
glmertree::lmertree(
data = analysis(cv$splits[[1]]),
formula = Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
),
#cores = 7
)
#}
temp_assessment <- rsample::assessment(cv_obj$splits[[i]])
fitted_result <-
glmertree::lmertree(
data = analysis(cv$splits[[1]]),
formula = Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
),
#cores = 7
)
#}
temp_assessment <- rsample::assessment(cv$splits[[1]])
fitted_result <-
glmertree::lmertree(
data = rsample::analysis(cv$splits[[1]]),
formula = Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
),
#cores = 7
)
#}
temp_assessment <- rsample::assessment(cv$splits[[1]])
temp_assessment %>%
dplyr::mutate(predictions = glmertree:::predict.glmertree(
fitted_result,
newdata = .,
allow.new.levels = TRUE)
)
temp_assessment
temp_assessment %>% mutate(1)
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula
)
??new_quant_param
source('~/Documents/gardenr/R/gardenr-package.R', echo=TRUE)
source('~/Documents/gardenr/R/hyperparameter_functions.R', echo=TRUE)
devtools::document()
?fit_glmertree_to_cv
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
devtools::document()
?cross_validate_it
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
)
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula, make_my_tuning_grid = TRUE
)
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
?cross_validate_it
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
fitted
devtools::document()
maxdepth_par()
class(maxdepth_par())
dials::grid_max_entropy(maxdepth_par(min = 2, max = 5), size = 5)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
use_ccby_license()
??` %>% `
devtools::document()
devtools::document()
devtools::document
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
?`:::`
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?`:::`
devtools::document()
devtools::document()
load_all()
devtools::load_all()
devtools::load_all()
?gardenr::cross_validate_it()
dat <- sim_multilevel()
head(dat)
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
str(cv)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
fitted
devtools::load_all()
?gardenr::cross_validate_it()
dat <- sim_multilevel() %>% tibble()
dat
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
cv$splits[[1]]
rsample::analysis(cv$splits[[1]])
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
ex_formula
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
fitted
devtools::load_all()
?gardenr::cross_validate_it()
dat <- sim_multilevel()
tibble(dat)
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
rsample::analysis(cv$splits[[1]])
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
ex_formula
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
fitted
fitted %>% arrange(rmse)
fitted %>% arrange(mae)
?maxdepth_par()
devtools::document()
update.packages('knitr')
devtools::document()
?is.null
asdf <- NULL
is.null(asdf)
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("r-lib/testthat")
devtools::install_github("r-lib/usethis")
here::here()
usethis::use_test("use_this_test_file")
usethis::use_test("test_file_usethis")
library(usethis)
remove.packages('usethis')
remove.packages('testthat')
install.packages("testthat")
install.packages("testthat")
install.packages("usethis")
usethis::use_test("test_file_usethis")
names(gardenr)
library(testthat)
sessionInfo()
?gardenr::cross_validate_it
?expect_output
full_sim_dat <-
sim_multilevel(
j = 100,
intercept_1 = 4,
residual_var_sd_1 = 0.6,
random_int_mean_2 = 2,
residual_var_sd_2 = 0.8,
start_seed = 111,
num_in_groups = rpois(n = 100, lambda = 10)
)
library(gardenr)
full_sim_dat <-
sim_multilevel(
j = 100,
intercept_1 = 4,
residual_var_sd_1 = 0.6,
random_int_mean_2 = 2,
residual_var_sd_2 = 0.8,
start_seed = 111,
num_in_groups = rpois(n = 100, lambda = 10)
)
full_sim_dat
str(full_sim_dat)
expect_is(full_sim_dat, 'data.frame')
expect_type(full_sim_dat, 'data.frame')
full_sim_dat %>% str()
expect_type(full_sim_dat, 'list')
typeof(full_sim_dat)
full_sim_dat <-
sim_multilevel(
j = 100,
intercept_1 = 4,
residual_var_sd_1 = 0.6,
random_int_mean_2 = 2,
residual_var_sd_2 = 0.8,
start_seed = 111,
num_in_groups = rpois(n = 100, lambda = 10)
) %>% tibble()
typeof(full_sim_dat)
full_sim_dat <-
sim_multilevel(
j = 100,
intercept_1 = 4,
residual_var_sd_1 = 0.6,
random_int_mean_2 = 2,
residual_var_sd_2 = 0.8,
start_seed = 111,
num_in_groups = rpois(n = 100, lambda = 10)
) %>% tidyverse::tibble()
library(tidyverse)
full_sim_dat <-
sim_multilevel(
j = 100,
intercept_1 = 4,
residual_var_sd_1 = 0.6,
random_int_mean_2 = 2,
residual_var_sd_2 = 0.8,
start_seed = 111,
num_in_groups = rpois(n = 100, lambda = 10)
) %>% tibble()
typeof(full_sim_dat)
typeof(full_sim_dat)
full_sim_dat <-
sim_multilevel(
j = 100,
intercept_1 = 4,
residual_var_sd_1 = 0.6,
random_int_mean_2 = 2,
residual_var_sd_2 = 0.8,
start_seed = 111,
num_in_groups = rpois(n = 100, lambda = 10)
)
typeof(full_sim_dat)
expect_type(full_sim_dat, 'list')
formula1 <-
Formula::as.Formula(
paste0('outcome ~ smallest_1 | (1 | id_vector) |  ',
partitioning_vars
)
)
partitioning_vars <-
full_sim_dat %>%
select(small_2, small_c_1, contains('nuisance')) %>%
names() %>%
paste0(collapse = ' + ')
formula1 <-
Formula::as.Formula(
paste0('outcome ~ smallest_1 | (1 | id_vector) |  ',
partitioning_vars
)
)
typeof(formula1)
str(formula1)
class(formula1)
class(full_sim_dat)
expect_s3_class(full_sim_dat, 'data.frame')
expect_s3_class(full_sim_dat, 'tibble')
partitioning_vars
maxdepth_tuning <-
maxdepth_par(maxdepth_min = 0L, maxdepth_max = 20L)
class(maxdepth_tuning)
expect_s3_class(maxdepth_tuning, 'quant_param', 'param')
maxdepth_tuning
typeof(maxdepth_tuning)
class(maxdepth_tuning)
expect_s3_class(maxdepth_tuning, c('quant_param', 'param'))
alpha_tuning <-
alpha_par(alpha_min = 0.10, alpha_max = 0.001)
class(alpha_tuning)
trim_tuning <-
trim_par(trim_min = 0.01, trim_max = 0.5)
trim_tuning <-
trim_par(trim_min = 0.01, trim_max = 0.5)
class(trim_tuning)
# cross validate
fitted <-
gardenr::cross_validate_it(
cv_obj = cv,
seed = 111,
mod_formula = formula1,
tuning_grid = tuning_grid,
cluster = id_vector
)
source('~/Documents/gardenr/tests/testthat/test-test_file_usethis.R', echo=TRUE)
# make vfold_cv obj
# NOT TESTING BECAUSE NOT MY FUNCTION
cv <-
rsample::vfold_cv(data = training, v = 10)
# make a tuning grid
# NOT TESTING BECAUSE NOT MY FUNCTION
tuning_grid <-
dials::grid_max_entropy(
maxdepth_tuning,
alpha_tuning,
trim_tuning,
size = 25
)
# make vfold_cv obj
# NOT TESTING BECAUSE NOT MY FUNCTION
cv <-
rsample::vfold_cv(data = training, v = 10)
sim_split <- rsample::initial_split(full_sim_dat)
training <- rsample::training(sim_split)
comparison_testing <- rsample::testing(sim_split)
# make vfold_cv obj
# NOT TESTING BECAUSE NOT MY FUNCTION
cv <-
rsample::vfold_cv(data = training, v = 10)
# cross validate
fitted <-
gardenr::cross_validate_it(
cv_obj = cv,
seed = 111,
mod_formula = formula1,
tuning_grid = tuning_grid,
cluster = id_vector
)
class(fitted)
fitted
class(fitted)
# testing returned table
expect_s3_class(fitted, c('tbl_df', 'tbl', 'data.frame'))
# testing rmse
rmse(
observed_y = comparison_testing$outcome,
predicted_y = predict(no_cv_trained, newdata = comparison_testing)
)
# testing rmse
rmse(
observed_y = comparison_testing$outcome,
predicted_y = predict(fitted, newdata = comparison_testing)
)
# testing rmse
rmse(
observed_y = comparison_testing$outcome,
predicted_y = glmertre:::lmertree.predict(fitted, newdata = comparison_testing)
)
# testing rmse
rmse(
observed_y = comparison_testing$outcome,
predicted_y = glmertree:::lmertree.predict(fitted, newdata = comparison_testing)
)
# testing rmse
rmse(
observed_y = comparison_testing$outcome,
predicted_y = glmertree:::predict.lmertree(fitted, newdata = comparison_testing)
)
glmertree:::predict.lmertree(fitted, newdata = comparison_testing)
library(glmertree)
# testing rmse
rmse(
observed_y = comparison_testing$outcome,
predicted_y = predict(fitted, newdata = comparison_testing)
)
dplyr::arrange(fitted, rmse)
cv_trained <-
lmertree(
data = training,
formula =
formula1,
maxdepth = fitted$maxdepth_par[1],
alpha = fitted$alpha_par[1],
trim = fitted$trim_par[1],
cluster = id_vector,
verbose = TRUE
)
# testing rmse
rmse(
observed_y = comparison_testing$outcome,
predicted_y = glmertree:::predict.lmertree(cv_trained, newdata = comparison_testing)
)
# testing rmse
RMSE1 <-
rmse(
observed_y = comparison_testing$outcome,
predicted_y = glmertree:::predict.lmertree(cv_trained, newdata = comparison_testing)
)
RMSE1 %>% class()
type(MAE1)
typeof(MAE1)
typeof(RMSE1)
