use_r('test_funcs.R')
usethis::use_r('test_funcs.R')
asdf <- function(){print('asdf')}
asdf
asdf()
load_all()
usethis::load_all()
devtools::::load_all()
devtools::load_all()
devtools::load_all()
asdf()
library(usethis)
use_r('gardenr-package')
use_r('fitting_functions.R')
use_r('simulation_functions.R')
use_r('hyperparameter_functions.R')
use_r('helper_funcs.R')
rand(4)
rnorm(4)
rnorm(4)
rnorm(4)
devtools::document()
load_all()
devtools::load_all()
rmse
rmse(c(1,2,3), c(2, 2, 3))
mae(c(1,2,3), c(2, 2, 3))
?rmse
lme4::sleepstudy
lme4::sleepstudy %>% tibble()
library(tidyverse)
lme4::sleepstudy %>% tibble()
glmertree::DepressionDemo %>% tibble()
glmertree::DepressionDemo %>% count(treatement)
glmertree::DepressionDemo %>% count(treatment)
devtools
devtools::document()
load_all
devtools::load_all()
?fit_glmertree_to_cv()
dat <- glmertree::DepressionDemo
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'depression ~ treatment |
(1 | cluster) |
anxiety + age'
)
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
devtools::document()
devtools::document()
devtools::load_all()
?gardenr::fit_glmertree_to_cv()
dat <- glmertree::DepressionDemo
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'depression ~ treatment |
(1 | cluster) |
anxiety + age'
)
fit_glmertree_to_cv <-
function(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula)
devtools::document()
devtools::document()
devtools::document()
?gardenr::fit_glmertree_to_cv()
dat <- glmertree::DepressionDemo
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'depression ~ treatment |
(1 | cluster) |
anxiety + age'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
...
)
dat <- glmertree::DepressionDemo
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'depression ~ treatment |
(1 | cluster) |
anxiety + age'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula
)
source('~/Documents/gardenr/R/gardenr-package.R', echo=TRUE)
devtools::load_all()
dat <- glmertree::DepressionDemo
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'depression ~ treatment |
(1 | cluster) |
anxiety + age'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula
)
devtools::document
devtools::document()
devtools::load_all()
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
dat <- glmertree::DepressionDemo
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'depression ~ treatment |
(1 | cluster) |
anxiety + age'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula
)
cv$splits
sim_multilevel()
source('~/Documents/gardenr/R/simulation_functions.R', echo=TRUE)
sim_multilevel()
rpois(j = 81, lambda = 15)
?rpois(j = 81, lambda = 15)
rpois(n = 81, lambda = 15)
source('~/Documents/gardenr/R/simulation_functions.R', echo=TRUE)
sim_multilevel()
rpois(n = 81, lambda = 15)[1]
source('~/Documents/gardenr/R/simulation_functions.R', echo=TRUE)
sim_multilevel()
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
devtools::document()
?fit_glmertree_to_cv
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nusance_c_1a'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula
)
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
devtools::document
devtools::document()
?fit_glmertree_to_cv
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula
)
cv$splits[[1]]
analysis(cv$splits)
rsample::analysis(cv$splits)
rsample::analysis(cv$splits[[1]])
fitted_result <-
glmertree::lmertree(
data = analysis(cv$splits[[1]]),
formula = Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
),
#cores = 7
)
#}
temp_assessment <- rsample::assessment(cv_obj$splits[[i]])
fitted_result <-
glmertree::lmertree(
data = analysis(cv$splits[[1]]),
formula = Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
),
#cores = 7
)
#}
temp_assessment <- rsample::assessment(cv$splits[[1]])
fitted_result <-
glmertree::lmertree(
data = rsample::analysis(cv$splits[[1]]),
formula = Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
),
#cores = 7
)
#}
temp_assessment <- rsample::assessment(cv$splits[[1]])
temp_assessment %>%
dplyr::mutate(predictions = glmertree:::predict.glmertree(
fitted_result,
newdata = .,
allow.new.levels = TRUE)
)
temp_assessment
temp_assessment %>% mutate(1)
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula
)
??new_quant_param
source('~/Documents/gardenr/R/gardenr-package.R', echo=TRUE)
source('~/Documents/gardenr/R/hyperparameter_functions.R', echo=TRUE)
devtools::document()
?fit_glmertree_to_cv
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
fit_glmertree_to_cv(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
devtools::document()
?cross_validate_it
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
)
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula, make_my_tuning_grid = TRUE
)
source('~/Documents/gardenr/R/fitting_functions.R', echo=TRUE)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
?cross_validate_it
dat <- sim_multilevel()
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
fitted
devtools::document()
maxdepth_par()
class(maxdepth_par())
dials::grid_max_entropy(maxdepth_par(min = 2, max = 5), size = 5)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
use_ccby_license()
??` %>% `
devtools::document()
devtools::document()
devtools::document
devtools::document()
warnings()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
?`:::`
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?`:::`
devtools::document()
devtools::document()
load_all()
devtools::load_all()
devtools::load_all()
?gardenr::cross_validate_it()
dat <- sim_multilevel()
head(dat)
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
str(cv)
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
fitted
devtools::load_all()
?gardenr::cross_validate_it()
dat <- sim_multilevel() %>% tibble()
dat
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
cv$splits[[1]]
rsample::analysis(cv$splits[[1]])
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
ex_formula
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
fitted
devtools::load_all()
?gardenr::cross_validate_it()
dat <- sim_multilevel()
tibble(dat)
example_split <- rsample::initial_split(dat)
example_train <- rsample::training(example_split)
example_test  <-  rsample::testing(example_split)
cv <- rsample::vfold_cv(data = example_train, v = 10)
rsample::analysis(cv$splits[[1]])
ex_formula <-
Formula::as.Formula(
'outcome ~ small_1 |
(1 | id_vector) |
small_c_1 + small_c_2 + nuisance_1a + nuisance_c_1a'
)
ex_formula
fitted <-
cross_validate_it(
cv_obj = cv,
seed = 713,
mod_formula = ex_formula,
make_my_tuning_grid = TRUE
)
fitted
fitted %>% arrange(rmse)
fitted %>% arrange(mae)
